<html>

<head>
	<title>象棋</title>
	<link rel='stylesheet' href='../stylesheets/reset.css' />
	<link rel='stylesheet' href='../stylesheets/style.css' />
	

	<script src="/javascripts/jquery.min.js" type=""></script>
	<script src="/javascripts/d3.v2.min.js" type=""></script>
	
	<script src="/socket.io/socket.io.js"></script>
	
	<script type="text/javascript">
		var currentUrl = document.URL;
		var socket 		= io.connect(currentUrl),
			NUM_ROWS 	= 8,
			NUM_COLS	= 4,
			TEAM_ENUM	= -1,
			chessPieces = {				
				'redGeneral': {	name: 'general', color: 'red', character: '帥' },
				'redAdvisor1': { name: 'advisor', color: 'red', character: '仕' },
				'redAdvisor2': { name: 'advisor', color: 'red', character: '仕' },
				'redElephant1': { name: 'elephant', color: 'red', character: '相' },
				'redElephant2': { name: 'elephant', color: 'red', character: '相' },
				'redHorse1': { name: 'horse', color: 'red', character: '傌' },
				'redHorse2': { name: 'horse', color: 'red', character: '傌' },
				'redChariot1': { name: 'chariot', color: 'red', character: '俥' },
				'redChariot2': { name: 'chariot', color: 'red', character: '俥' },
				'redCannon1': { name: 'cannon', color: 'red', character: '炮' },
				'redCannon2': { name: 'cannon', color: 'red', character: '炮' },
				'redSoldier1': { name: 'soldier', color: 'red', character: '兵' },
				'redSoldier2': { name: 'soldier', color: 'red', character: '兵' },
				'redSoldier3': { name: 'soldier', color: 'red', character: '兵' },
				'redSoldier4': { name: 'soldier', color: 'red', character: '兵' },
				'redSoldier5': { name: 'soldier', color: 'red', character: '兵' },
				'blackGeneral': { name: 'general', color: 'black', character: '將' },
				'blackAdvisor1': { name: 'advisor', color: 'black', character: '士' },
				'blackAdvisor2': { name: 'advisor', color: 'black', character: '士' },
				'blackElephant1': { name: 'elephant', color: 'black', character: '象' },
				'blackElephant2': { name: 'elephant', color: 'black', character: '象' },
				'blackHorse1': { name: 'horse', color: 'black', character: '馬' },
				'blackHorse2': { name: 'horse', color: 'black', character: '馬' },
				'blackChariot1': { name: 'chariot', color: 'black', character: '車' },
				'blackChariot2': { name: 'chariot', color: 'black', character: '車' },
				'blackCannon1': { name: 'cannon', color: 'black', character: '砲' },
				'blackCannon2': { name: 'cannon', color: 'black', character: '砲' },
				'blackSoldier1': { name: 'soldier', color: 'black', character: '卒' },
				'blackSoldier2': { name: 'soldier', color: 'black', character: '卒' },
				'blackSoldier3': { name: 'soldier', color: 'black', character: '卒' },
				'blackSoldier4': { name: 'soldier', color: 'black', character: '卒' },
				'blackSoldier5': { name: 'soldier', color: 'black', character: '卒' }
			},
			initLocBuffer = -1;
	
		socket.on('submit-chat-callback', function(chatData) {
			var socketId 	= chatData['socketId'],
				message		= chatData['message'],
				nickname	= chatData['nickname'],
				color		= chatData['color'],
				messageType	= chatData['messageType'],
				chatHtml;
			
			switch (messageType) {
				case 'chat':
					chatHtml	= '<li class="chat-message"><span class="nickname" style="color: '+color+';">'+nickname+'</span>: <span class="message '+messageType+'">'+message+'</span></li>';
					break;
				case 'change-nickname':
					chatHtml	= '<li class="chat-message"><span class="message '+messageType+'">'+message+'</span></li>';
					break;
			}
			$('.chat-wrapper .chat-messages').append(chatHtml).animate({ scrollTop: $('.chat-wrapper .chat-messages').prop('scrollHeight') }, 1);
		});
		
		socket.on('update-users-list', function(socketsHash) {
			var socketData,
				usersListHtml = '';
				
			for (var socketId in socketsHash) {
				socketData = socketsHash[socketId];
				usersListHtml += generateUserItemHtml(socketId, socketData);
			}
			$('.users-wrapper .users-list').empty().append(usersListHtml);
		});
		
		socket.on('display-game-feedback', function(feedbackHash) {
			var feedbackMessage = feedbackHash['message'];
			$('.feedback-wrapper .feedback').html(feedbackMessage);
		});
		
		socket.on('update-board', function(gameBoard, perspective) {
			
		});
		
		socket.on('submit-player-ready-callback', function() {
			$('.game-controls .feedback').text('Waiting for more players...');
		});
		
		socket.on('set-team-enum', function(teamEnum) {
			TEAM_ENUM = teamEnum;
		});
		
		socket.on('show-btn-ready', function() {
			$('.btn-ready').css('display', 'block').removeAttr('data-ready');
			$('.btn-ready').closest('.btn-wrapper').show();
			$('.btn-ready').text('Ready Up');
		});
		
		socket.on('show-btn-draw', function() {
			$('.btn-draw').css('display', 'block').removeAttr('data-drawn');
			$('.btn-draw').closest('.btn-wrapper').show();
			$('.btn-draw').text('Declare Draw');
		});
		
		socket.on('hide-btn-ready', function() {
			$('.btn-ready').hide();
			$('.btn-ready').closest('.btn-wrapper').hide();
		});
		
		socket.on('hide-btn-draw', function() {
			$('.btn-draw').hide();
			$('.btn-draw').closest('.btn-wrapper').hide();
		});
		
		socket.on('broadcast-chat', function(message) {
			var chatHtml	= '<li class="chat-message"><span class="message server">'+message+'</span></li>';
			$('.chat-wrapper .chat-messages').append(chatHtml).animate({ scrollTop: $('.chat-wrapper .chat-messages').prop('scrollHeight') }, 1);
		});
		
		socket.on('display-board', function(gameBoard) {
			if (!gameBoard) {
				return;
			}
			
			var $gameBoard = $('.content-main .game-board'),
				$gameBoardContainer = $('.content-main .game-board .game-board-container'),
				$row,
				$col,
				chessPieceName,
				chessPieceInfo,
				chessPieceColor,
				chessPieceTeamEnum,
				chessPieceTeamType,
				$chessPiece,
				status;
			
			
			$gameBoardContainer.empty();
			
			
			for (var row = 0; row < NUM_ROWS; row++) {
				$row = $('<div class="row"></div>');
				for (var col = 0; col < NUM_COLS; col++) {
					chessPieceInfo = gameBoard[row][col];
					chessPieceInfoStatus = chessPieceInfo['status'];
					$col = $('<div class="col" data-cell-id="'+row+','+col+'"></div>');
					if (chessPieceInfoStatus != 'empty') {
						// there is a piece here
						if (chessPieceInfoStatus == 'hidden') {
							$chessPiece = $('<a href="#" class="chess-piece"></a>');
						} else {
							chessPieceName = chessPieces[chessPieceInfo['id']]['character'];
							chessPieceColor = chessPieceInfo['color'];
							chessPieceTeamEnum = chessPieceInfo['teamEnum'];
							if (chessPieceTeamEnum == TEAM_ENUM) {
								chessPieceTeamType = 'player';
							} else {
								chessPieceTeamType = 'opponent';
							}
							$chessPiece = $('<a href="#" class="chess-piece active '+chessPieceTeamType+'" style="color: '+chessPieceColor+';">'+chessPieceName+'</a>');
						}
						$col.append($chessPiece);
					}
					$row.append($col);
				}
				$gameBoardContainer.append($row);
			}
			
		});
		
		socket.on('chess-piece-casualty', function(killedChessPiece) {
			console.log(killedChessPiece);
			var chessPieceName = killedChessPiece['name'],
				chessPieceCharacter = chessPieces[killedChessPiece['id']]['character'],
				chessPieceTeamEnum = killedChessPiece['teamEnum'],
				chessPieceColor = killedChessPiece['color'],
				$matchedCasualtyContainers = $('.casualties[data-team-enum="'+chessPieceTeamEnum+'"]').find('.'+chessPieceName),
				$matchedCasualtyContainer,
				$chessPiece;
			
			$.each($matchedCasualtyContainers, function(index, container) {
				if ($(container).children().length == 0) {
					$chessPiece = $('<a href="#" class="chess-piece active" style="color: '+chessPieceColor+';">'+chessPieceCharacter+'</a>');
					$(container).append($chessPiece);
					return false;
				}
			});
		});
		
		function generateUserItemHtml(socketId, socketData) {
			var nickname 	= socketData['nickname'],
				color		= socketData['color'],
				status		= socketData['status'],
				html 		= '<li class="user-item" data-socket-id="'+socketId+'"><span class="status '+status+'"></span> <span class="nickname" style="color: '+color+';">'+nickname+'</span></li>';
			return html;
		}
		
		function drawBoardBackground() {
			var chart 	= d3.select('.game-board').append('svg')
				.attr('width', 242)
				.attr('height', 482);
				
			// make horizontal lines
			for (var i = 0; i < 9; i++) {
				chart.append('line')
					.attr('x1', 1)
					.attr('x2', 241)
					.attr('y1', 1+i*60)
					.attr('y2', 1+i*60)
					.style('stroke', '#000')
					.style('stroke-width', 1);
			}			
			
			// make vertical lines
			for (var i = 0; i < 5; i++) {
				chart.append('line')
					.attr('y1', 1)
					.attr('y2', 481)
					.attr('x1', 1+i*60)
					.attr('x2', 1+i*60)
					.style('stroke', '#000')
					.style('stroke-width', 1);
			}
		}
		
		$().ready(function() {
			$('.nickname-input').live('keypress', function(e) {
				var nickname;
				if (e.keyCode == 13) {
					nickname = $(this).val();
				    socket.emit('set-nickname', nickname);
					$(this).attr('placeholder', nickname);
					$(this).val('');
				}
			});
			
			$('.chat-input').live('keypress', function(e) {
				var message;
				if (e.keyCode == 13) {
					message = $(this).val();
				    socket.emit('submit-chat', message, 'chat');
					$(this).val('');
				}
			});
			
			$('.btn-ready').live('click', function(e) {
				var isReady = $(this).attr('data-ready');
				if (isReady != 'ready') {
					$(this).attr('data-ready', 'ready');
					$(this).text('Readied...');
					socket.emit('submit-player-ready');
				}
				e.preventDefault();
			});
			
			$('.btn-draw').live('click', function(e) {
				var isDrawn = $(this).attr('data-drawn');
				if (isDrawn != 'drawn') {
					$(this).attr('data-drawn', 'drawn');
					$(this).text('Draw Declared...');
					socket.emit('submit-draw');
				}
				e.preventDefault();
			});
			
			$('.rules-wrapper').live('click', function(e) {
				var $rulesContainer = $(this).find('.rules-container'),
					$usersList = $('.users-wrapper .users-list'),
					$target = $(e.target);
					
				if ($target[0].nodeName == 'H2') {
					if ( $rulesContainer.is(':visible') ) {
						$rulesContainer.slideUp();
						$usersList.slideDown();
					} else {
						$rulesContainer.slideDown();
						$usersList.slideUp();
					}
				}
			});
			
			$('.users-wrapper').live('click', function(e) {
				var $usersList = $(this).find('.users-list');
					$rulesContainer = $('.rules-wrapper').find('.rules-container'),
					$target = $(e.target);
					
				if ($target[0].nodeName == 'H2') {
					if ( $usersList.is(':visible') ) {
						$usersList.slideUp();
						$rulesContainer.slideDown();
					} else {
						$usersList.slideDown();
						$rulesContainer.slideUp();
					}
				}
			});
			
			$('.col').live('click', function(e) {
				var cellInfo 	= $(this).attr('data-cell-id'),
					cellRow		= cellInfo.split(',')[0],
					cellCol		= cellInfo.split(',')[1],
					$chessPiece	= $(this).find('.chess-piece'),
					$oldChessPiece,
					oldCellRow,
					oldCellCol,
					status;
				if ($chessPiece.length > 0) {
					status = ($chessPiece.text() == '' ? 'hidden' : 'active');
					if (status == 'hidden') {
						socket.emit('show-piece', { row: cellRow, col: cellCol });	
						$chessPiece.removeClass('selected');
						initLocBuffer = -1;
					} else {
						// attempting to move from loc 1 to loc 2
						if (initLocBuffer == -1) {
							initLocBuffer = { row: cellRow, col: cellCol };
							$chessPiece.addClass('selected');
						} else {
							// get final location, emit to server
							finalLoc = { row: cellRow, col: cellCol };
							socket.emit('move-piece', { initLocHash: initLocBuffer, finalLocHash: finalLoc });
							// remove old chess piece selection
							oldCellRow = initLocBuffer['row'];
							oldCellCol = initLocBuffer['col'];
							$oldChessPiece = $('.col[data-cell-id="'+oldCellRow+','+oldCellCol+'"]').find('.chess-piece');
							$oldChessPiece.removeClass('selected');
							// reset initLocBuffer
							initLocBuffer = -1;
						}
					}
				} else {
					if (initLocBuffer != -1) {
						// moving selected piece to empty space
						finalLoc = { row: cellRow, col: cellCol };
						socket.emit('move-piece', { initLocHash: initLocBuffer, finalLocHash: finalLoc });
						// remove old chess piece selection
						oldCellRow = initLocBuffer['row'];
						oldCellCol = initLocBuffer['col'];
						$oldChessPiece = $('.col[data-cell-id="'+oldCellRow+','+oldCellCol+'"]').find('.chess-piece');
						$oldChessPiece.removeClass('selected');
						// reset initLocBuffer
						initLocBuffer = -1;
					}
				}
				
				e.preventDefault();
				
			});
			
			$('.chess-piece').live('click', function(e) {
				e.preventDefault();
			});
			
			drawBoardBackground();
		});
		
		
	</script>
</head>

<body>
	<div class="wrapper-inset">
	<div class="wrapper">
		<div class="content-main">
			<div class="game-board">
				<div class="casualties left" data-team-enum="0">
					<ul class="casualties-label">
						<li class="casualties-label-letter">C</li>
						<li class="casualties-label-letter">A</li>
						<li class="casualties-label-letter">S</li>
						<li class="casualties-label-letter">U</li>
						<li class="casualties-label-letter">A</li>
						<li class="casualties-label-letter">L</li>
						<li class="casualties-label-letter">T</li>
						<li class="casualties-label-letter">I</li>
						<li class="casualties-label-letter">E</li>
						<li class="casualties-label-letter">S</li>
					</ul>
					<div class="casualty-container general middle"></div>
					<div class="casualty-container advisor left"></div>
					<div class="casualty-container advisor right"></div>
					<div class="casualty-container elephant left"></div>
					<div class="casualty-container elephant right"></div>
					<div class="casualty-container chariot left"></div>
					<div class="casualty-container chariot right"></div>
					<div class="casualty-container horse left"></div>
					<div class="casualty-container horse right"></div>
					<div class="casualty-container cannon left"></div>
					<div class="casualty-container cannon right"></div>
					<div class="casualty-container soldier left top-pair"></div>
					<div class="casualty-container soldier right top-pair"></div>
					<div class="casualty-container soldier left mid-pair"></div>
					<div class="casualty-container soldier right mid-pair"></div>
					<div class="casualty-container soldier middle last"></div>
				</div>
				
				<div class="casualties right" data-team-enum="1">
					<ul class="casualties-label">
						<li class="casualties-label-letter">C</li>
						<li class="casualties-label-letter">A</li>
						<li class="casualties-label-letter">S</li>
						<li class="casualties-label-letter">U</li>
						<li class="casualties-label-letter">A</li>
						<li class="casualties-label-letter">L</li>
						<li class="casualties-label-letter">T</li>
						<li class="casualties-label-letter">I</li>
						<li class="casualties-label-letter">E</li>
						<li class="casualties-label-letter">S</li>
					</ul>
					<div class="casualty-container general middle"></div>
					<div class="casualty-container advisor left"></div>
					<div class="casualty-container advisor right"></div>
					<div class="casualty-container elephant left"></div>
					<div class="casualty-container elephant right"></div>
					<div class="casualty-container chariot left"></div>
					<div class="casualty-container chariot right"></div>
					<div class="casualty-container horse left"></div>
					<div class="casualty-container horse right"></div>
					<div class="casualty-container cannon left"></div>
					<div class="casualty-container cannon right"></div>
					<div class="casualty-container soldier left top-pair"></div>
					<div class="casualty-container soldier right top-pair"></div>
					<div class="casualty-container soldier left mid-pair"></div>
					<div class="casualty-container soldier right mid-pair"></div>
					<div class="casualty-container soldier middle last"></div>
				</div>
				<div class="game-board-container"></div>
			</div>
		
			<div class="game-controls">
				<div class="btn-wrapper">
					<a href="#" class="btn btn-ready">Ready Up</a>
					<a href="#" class="btn btn-draw">Declare Draw</a>
				</div>
				<div class="feedback-wrapper">
					<span class="feedback">Ready up to play...</span>
				</div>
			</div>
		</div>
		
		<div class="sidebar">
			<div class="users-wrapper">
				<h2>ching chong</h2>
				<ul class="users-list">
				</ul>
			</div>
			
			<div class="rules-wrapper">
				<h2>ling long</h2>
				<div class="rules-container">
					<p>The goal of the game is to try to kill off all of your opponents pieces.</p>
					<p>The game begins by the first player flipping over, or revealing, a piece.  From here on, the teams are set - the color of the piece flipped over is the color of the team assigned to that player.  The other player is the other color (subsequent flips do not change teams, regardless of whether or not you flip your own piece or another players piece).</p>
					<p>To capture, you can only move adjacently by 1 space.  Furthermore, you must be of equal or higher rank than the piece you're trying to capture.  The ranking is as follows:</p>
					<ul class="rank-list">
						<li class="team-one-ranks">
							<span class="piece-character red">帥</span> > <span class="piece-character red">仕</span> > <span class="piece-character red">相</span> > <span class="piece-character red">俥</span> > <span class="piece-character red">傌</span> > <span class="piece-character red">炮</span> > <span class="piece-character red">兵</span>
						</li>
						<li class="team-two-ranks">
							<span class="piece-character black">將</span> > <span class="piece-character black">士</span> > <span class="piece-character black">象</span> > <span class="piece-character black">車</span> > <span class="piece-character black">馬</span> > <span class="piece-character black">砲</span> > <span class="piece-character black">卒</span>
						</li>
					</ul>
					<p>So <span class="piece-character black">士</span> can capture <span class="piece-character red">仕</span>, <span class="piece-character red">相</span>, <span class="piece-character red">俥</span>, etc...  The only exception to this rule is that soldiers <span class="piece-character red">兵</span> and <span class="piece-character black">卒</span> can capture generals <span class="piece-character black">將</span> and <span class="piece-character red">帥</span>, respectively. Of course, this means that generals cannot capture soldiers.</p>
					<p>One special piece listed in the ranks is the cannons <span class="piece-character red">炮</span> and <span class="piece-character black">砲</span>.  These pieces can capture ANY opponent, regardless of the opponents rank.  However, it must capture by hopping over only one friendly/opponent piece.  The number of spaces between the initial location and final capture location of the piece does not matter, only that it must hop over just one piece.</p>
					<p>The game is over when you kill off all of your opponents' pieces, your opponent leaves, or you both declare a draw.</p>
				</div>
			</div>
			<div class="chat-wrapper">
				<h2>ting tong</h2>
				<ul class="chat-messages">

				</ul>
			</div>
			
			<div class="nickname-chat-input-wrapper">
				<input type="text" class="chat-input" placeholder="enter a message"></input>
				<input type="text" class="nickname-input" placeholder="set your nickname"></input>
			</div>
		</div>
	</div>
	
	</div>
	
	<div class="rules">
	</div>
</body>

</html>